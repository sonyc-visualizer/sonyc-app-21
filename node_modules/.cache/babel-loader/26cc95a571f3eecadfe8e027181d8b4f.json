{"ast":null,"code":"var _jsxFileName = \"/Users/almazhan/Desktop/TV-Tracker-sonyc/front-end/src/graphs/ScatterPlot.js\";\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport { dataNonGeo } from '../utils/MockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ScatterPlot = ({\n  data,\n  xAxisAttribute,\n  yAxisAttribute\n}) => {\n  let xData = data.map(d => {\n    if (d[xAxisAttribute] === undefined || d[xAxisAttribute] === 'NULL') {\n      return 'UNKOWN';\n    }\n\n    return d[xAxisAttribute];\n  });\n  let yData = data.map(d => {\n    if (d[yAxisAttribute] === undefined || d[yAxisAttribute] === 'NULL') {\n      return '';\n    }\n\n    return d[yAxisAttribute];\n  });\n  var datapoints = {\n    x: xData,\n    y: yData,\n    text: [],\n    mode: 'markers',\n    type: 'scatter',\n    marker: {\n      size: 12,\n      color: 'rgba(190, 53, 110, 0.5)'\n    },\n    hovertemplate: '<b>Noise Value</b>: %{y}' + '<br><b>Day</b>: %{x}<br>' + '<extra></extra>'\n  }; //accessibility\n\n  var data = [datapoints];\n  let layout = {\n    margin: {\n      pad: 5\n    },\n    transition: {\n      duration: 500,\n      easing: 'cubic'\n    },\n    frame: {\n      duration: 500\n    },\n    xaxis: {\n      showgrid: false\n    },\n    yaxis: {\n      showgrid: false\n    },\n    line: {\n      width: 0\n    },\n    title: 'Scatter Plot of Noise Level data',\n    hoverlabel: {\n      bgcolor: '#FFF'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Plot, {\n      className: \"\",\n      data: data,\n      layout: layout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = ScatterPlot;\nexport default ScatterPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"sources":["/Users/almazhan/Desktop/TV-Tracker-sonyc/front-end/src/graphs/ScatterPlot.js"],"names":["React","Plot","dataNonGeo","ScatterPlot","data","xAxisAttribute","yAxisAttribute","xData","map","d","undefined","yData","datapoints","x","y","text","mode","type","marker","size","color","hovertemplate","layout","margin","pad","transition","duration","easing","frame","xaxis","showgrid","yaxis","line","width","title","hoverlabel","bgcolor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SAASC,UAAT,QAA2B,mBAA3B;;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,cAAR;AAAwBC,EAAAA;AAAxB,CAAD,KAA8C;AAChE,MAAIC,KAAK,GAAGH,IAAI,CAACI,GAAL,CAAUC,CAAD,IAAO;AAC1B,QAAIA,CAAC,CAACJ,cAAD,CAAD,KAAsBK,SAAtB,IAAmCD,CAAC,CAACJ,cAAD,CAAD,KAAsB,MAA7D,EAAqE;AACnE,aAAO,QAAP;AACD;;AACD,WAAOI,CAAC,CAACJ,cAAD,CAAR;AACD,GALW,CAAZ;AAOA,MAAIM,KAAK,GAAGP,IAAI,CAACI,GAAL,CAAUC,CAAD,IAAO;AAC1B,QAAIA,CAAC,CAACH,cAAD,CAAD,KAAsBI,SAAtB,IAAmCD,CAAC,CAACH,cAAD,CAAD,KAAsB,MAA7D,EAAqE;AACnE,aAAO,EAAP;AACD;;AACD,WAAOG,CAAC,CAACH,cAAD,CAAR;AACD,GALW,CAAZ;AAOA,MAAIM,UAAU,GAAG;AACfC,IAAAA,CAAC,EAAEN,KADY;AAEfO,IAAAA,CAAC,EAAEH,KAFY;AAGfI,IAAAA,IAAI,EAAE,EAHS;AAIfC,IAAAA,IAAI,EAAE,SAJS;AAKfC,IAAAA,IAAI,EAAE,SALS;AAMfC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,KAAK,EAAE;AAFD,KANO;AAUfC,IAAAA,aAAa,EACX,6BACA,0BADA,GAEA;AAba,GAAjB,CAfgE,CA8BhE;;AACA,MAAIjB,IAAI,GAAG,CAACQ,UAAD,CAAX;AAEA,MAAIU,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAE;AADC,KADG;AAIXC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE,GADA;AAEVC,MAAAA,MAAM,EAAE;AAFE,KAJD;AAQXC,IAAAA,KAAK,EAAE;AACLF,MAAAA,QAAQ,EAAE;AADL,KARI;AAWXG,IAAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAXI;AAYXC,IAAAA,KAAK,EAAE;AAAED,MAAAA,QAAQ,EAAE;AAAZ,KAZI;AAaXE,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE;AADH,KAbK;AAgBXC,IAAAA,KAAK,EAAE,kCAhBI;AAiBXC,IAAAA,UAAU,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX;AAjBD,GAAb;AAoBA,sBACE;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,EAAhB;AAAmB,MAAA,IAAI,EAAEhC,IAAzB;AAA+B,MAAA,MAAM,EAAEkB;AAAvC;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CA1DD;;KAAMnB,W;AA4DN,eAAeA,WAAf","sourcesContent":["import React from 'react'\nimport Plot from 'react-plotly.js'\nimport { dataNonGeo } from '../utils/MockData'\n\nconst ScatterPlot = ({ data, xAxisAttribute, yAxisAttribute }) => {\n  let xData = data.map((d) => {\n    if (d[xAxisAttribute] === undefined || d[xAxisAttribute] === 'NULL') {\n      return 'UNKOWN'\n    }\n    return d[xAxisAttribute]\n  })\n\n  let yData = data.map((d) => {\n    if (d[yAxisAttribute] === undefined || d[yAxisAttribute] === 'NULL') {\n      return ''\n    }\n    return d[yAxisAttribute]\n  })\n\n  var datapoints = {\n    x: xData,\n    y: yData,\n    text: [],\n    mode: 'markers',\n    type: 'scatter',\n    marker: {\n      size: 12,\n      color: 'rgba(190, 53, 110, 0.5)'\n    },\n    hovertemplate:\n      '<b>Noise Value</b>: %{y}' +\n      '<br><b>Day</b>: %{x}<br>' +\n      '<extra></extra>'\n  }\n  //accessibility\n  var data = [datapoints]\n\n  let layout = {\n    margin: {\n      pad: 5\n    },\n    transition: {\n      duration: 500,\n      easing: 'cubic'\n    },\n    frame: {\n      duration: 500\n    },\n    xaxis: { showgrid: false },\n    yaxis: { showgrid: false },\n    line: {\n      width: 0\n    },\n    title: 'Scatter Plot of Noise Level data',\n    hoverlabel: { bgcolor: '#FFF' }\n  }\n\n  return (\n    <>\n      <Plot className=\"\" data={data} layout={layout} />\n    </>\n  )\n}\n\nexport default ScatterPlot\n"]},"metadata":{},"sourceType":"module"}