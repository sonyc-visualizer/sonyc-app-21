{"ast":null,"code":"var _jsxFileName = \"/Users/almazhan/Desktop/sonyc-app-1/src/graphs/BoxPlot.js\";\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BoxPlot({\n  data,\n  xAxisAttribute,\n  yAxisAttribute,\n  title\n}) {\n  let layout = {\n    autosize: true,\n    title: title || 'Untitled',\n    yaxis: {\n      title: yAxisAttribute\n    }\n  };\n  let xKeys = data.map(d => d[xAxisAttribute]).filter(onlyUnique);\n  let traces = xKeys.map((key, i) => {\n    let yData = data.filter(d => d[xAxisAttribute] === key).map(d => d[yAxisAttribute]).map(stringifyValue);\n    return {\n      y: yData,\n      name: stringifyValue(key),\n      boxpoints: 'all',\n      jitter: 0.3,\n      pointpos: -1.8,\n      type: 'box'\n    };\n  });\n  console.log(traces); // an example trace of Box Plot\n  // {\n  //   y: yData,\n  //   boxpoints: 'all',\n  //   jitter: 0.3,\n  //   pointpos: -1.8,\n  //   type: 'box',\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Plot, {\n    data: traces,\n    layout: layout\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n}\n\n_c = BoxPlot;\n\nfunction onlyUnique(value, index, self) {\n  return self.indexOf(value) === index;\n}\n\nfunction stringifyValue(x) {\n  if (x === undefined || x === null) {\n    return '';\n  }\n\n  return x.toString();\n}\n\nexport default BoxPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoxPlot\");","map":{"version":3,"sources":["/Users/almazhan/Desktop/sonyc-app-1/src/graphs/BoxPlot.js"],"names":["React","Plot","BoxPlot","data","xAxisAttribute","yAxisAttribute","title","layout","autosize","yaxis","xKeys","map","d","filter","onlyUnique","traces","key","i","yData","stringifyValue","y","name","boxpoints","jitter","pointpos","type","console","log","value","index","self","indexOf","x","undefined","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;;;AAEA,SAASC,OAAT,CAAiB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,cAAR;AAAwBC,EAAAA,cAAxB;AAAwCC,EAAAA;AAAxC,CAAjB,EAAkE;AAChE,MAAIC,MAAM,GAAG;AACXC,IAAAA,QAAQ,EAAE,IADC;AAGXF,IAAAA,KAAK,EAAEA,KAAK,IAAI,UAHL;AAIXG,IAAAA,KAAK,EAAE;AAAEH,MAAAA,KAAK,EAAED;AAAT;AAJI,GAAb;AAOA,MAAIK,KAAK,GAAGP,IAAI,CAACQ,GAAL,CAAUC,CAAD,IAAOA,CAAC,CAACR,cAAD,CAAjB,EAAmCS,MAAnC,CAA0CC,UAA1C,CAAZ;AAEA,MAAIC,MAAM,GAAGL,KAAK,CAACC,GAAN,CAAU,CAACK,GAAD,EAAMC,CAAN,KAAY;AACjC,QAAIC,KAAK,GAAGf,IAAI,CACbU,MADS,CACDD,CAAD,IAAOA,CAAC,CAACR,cAAD,CAAD,KAAsBY,GAD3B,EAETL,GAFS,CAEJC,CAAD,IAAOA,CAAC,CAACP,cAAD,CAFH,EAGTM,GAHS,CAGLQ,cAHK,CAAZ;AAKA,WAAO;AACLC,MAAAA,CAAC,EAAEF,KADE;AAELG,MAAAA,IAAI,EAAEF,cAAc,CAACH,GAAD,CAFf;AAGLM,MAAAA,SAAS,EAAE,KAHN;AAILC,MAAAA,MAAM,EAAE,GAJH;AAKLC,MAAAA,QAAQ,EAAE,CAAC,GALN;AAMLC,MAAAA,IAAI,EAAE;AAND,KAAP;AAQD,GAdY,CAAb;AAgBAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAZ,EA1BgE,CA4BhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAO,QAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,MAAZ;AAAoB,IAAA,MAAM,EAAER;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;KAtCQL,O;;AAwCT,SAASY,UAAT,CAAoBc,KAApB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AACtC,SAAOA,IAAI,CAACC,OAAL,CAAaH,KAAb,MAAwBC,KAA/B;AACD;;AAED,SAASV,cAAT,CAAwBa,CAAxB,EAA2B;AACzB,MAAIA,CAAC,KAAKC,SAAN,IAAmBD,CAAC,KAAK,IAA7B,EAAmC;AACjC,WAAO,EAAP;AACD;;AACD,SAAOA,CAAC,CAACE,QAAF,EAAP;AACD;;AAED,eAAehC,OAAf","sourcesContent":["import React from 'react'\nimport Plot from 'react-plotly.js'\n\nfunction BoxPlot({ data, xAxisAttribute, yAxisAttribute, title }) {\n  let layout = {\n    autosize: true,\n\n    title: title || 'Untitled',\n    yaxis: { title: yAxisAttribute },\n  }\n\n  let xKeys = data.map((d) => d[xAxisAttribute]).filter(onlyUnique)\n\n  let traces = xKeys.map((key, i) => {\n    let yData = data\n      .filter((d) => d[xAxisAttribute] === key)\n      .map((d) => d[yAxisAttribute])\n      .map(stringifyValue)\n\n    return {\n      y: yData,\n      name: stringifyValue(key),\n      boxpoints: 'all',\n      jitter: 0.3,\n      pointpos: -1.8,\n      type: 'box',\n    }\n  })\n\n  console.log(traces)\n\n  // an example trace of Box Plot\n  // {\n  //   y: yData,\n  //   boxpoints: 'all',\n  //   jitter: 0.3,\n  //   pointpos: -1.8,\n  //   type: 'box',\n  // }\n\n  return <Plot data={traces} layout={layout}></Plot>\n}\n\nfunction onlyUnique(value, index, self) {\n  return self.indexOf(value) === index\n}\n\nfunction stringifyValue(x) {\n  if (x === undefined || x === null) {\n    return ''\n  }\n  return x.toString()\n}\n\nexport default BoxPlot\n"]},"metadata":{},"sourceType":"module"}