{"ast":null,"code":"var _jsxFileName = \"/Users/almazhan/Desktop/TV-Tracker-sonyc/front-end/src/graphs/Histogram.js\";\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Histogram = ({\n  data,\n  xAxisAttribute,\n  yAxisAttribute,\n  title\n}) => {\n  console.log(data);\n  let layout = {\n    autosize: true,\n    // width: 500,\n    // height: 500,\n    // margin: {\n    //   l: 50,\n    //   r: 50,\n    //   b: 100,\n    //   t: 100,\n    //   pad: 6,\n    // },\n    title: title || 'Untitled',\n    xaxis: {\n      title: xAxisAttribute\n    },\n    yaxis: {\n      title: 'Count'\n    }\n  };\n  let xData = data.map(d => {\n    if (d[xAxisAttribute] === undefined || d[xAxisAttribute] === 'NULL') {\n      return 'UNKOWN';\n    }\n\n    return d[xAxisAttribute];\n  });\n  console.log(data);\n  console.log(xData);\n  let yData = data.map(d => {\n    if (d[yAxisAttribute] === undefined || d[yAxisAttribute] === 'NULL') {\n      return 'UNKOWN';\n    }\n\n    return d[yAxisAttribute];\n  });\n  return /*#__PURE__*/_jsxDEV(Plot, {\n    className: \"\",\n    data: [{\n      x: xData,\n      y: yData,\n      type: 'histogram',\n      marker: {\n        color: 'rgba(67, 174, 41, 0.7)',\n        line: {\n          color: 'rgba(255, 100, 102, 1)',\n          width: 1\n        }\n      },\n      histnorm: 'count',\n      hovertemplate: '<b>Noise Value</b>: %{y}' + '<br><b>Day</b>: %{x}<br>' + '<extra></extra>'\n    }],\n    layout: layout\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Histogram;\nexport default Histogram;\n\nvar _c;\n\n$RefreshReg$(_c, \"Histogram\");","map":{"version":3,"sources":["/Users/almazhan/Desktop/TV-Tracker-sonyc/front-end/src/graphs/Histogram.js"],"names":["React","Plot","Histogram","data","xAxisAttribute","yAxisAttribute","title","console","log","layout","autosize","xaxis","yaxis","xData","map","d","undefined","yData","x","y","type","marker","color","line","width","histnorm","hovertemplate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,cAAR;AAAwBC,EAAAA,cAAxB;AAAwCC,EAAAA;AAAxC,CAAD,KAAqD;AACrEC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,MAAIM,MAAM,GAAG;AACXC,IAAAA,QAAQ,EAAE,IADC;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,IAAAA,KAAK,EAAEA,KAAK,IAAI,UAXL;AAYXK,IAAAA,KAAK,EAAE;AAAEL,MAAAA,KAAK,EAAEF;AAAT,KAZI;AAaXQ,IAAAA,KAAK,EAAE;AAAEN,MAAAA,KAAK,EAAE;AAAT;AAbI,GAAb;AAgBA,MAAIO,KAAK,GAAGV,IAAI,CAACW,GAAL,CAAUC,CAAD,IAAO;AAC1B,QAAIA,CAAC,CAACX,cAAD,CAAD,KAAsBY,SAAtB,IAAmCD,CAAC,CAACX,cAAD,CAAD,KAAsB,MAA7D,EAAqE;AACnE,aAAO,QAAP;AACD;;AACD,WAAOW,CAAC,CAACX,cAAD,CAAR;AACD,GALW,CAAZ;AAMAG,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACA,MAAII,KAAK,GAAGd,IAAI,CAACW,GAAL,CAAUC,CAAD,IAAO;AAC1B,QAAIA,CAAC,CAACV,cAAD,CAAD,KAAsBW,SAAtB,IAAmCD,CAAC,CAACV,cAAD,CAAD,KAAsB,MAA7D,EAAqE;AACnE,aAAO,QAAP;AACD;;AACD,WAAOU,CAAC,CAACV,cAAD,CAAR;AACD,GALW,CAAZ;AAMA,sBACE,QAAC,IAAD;AACE,IAAA,SAAS,EAAC,EADZ;AAEE,IAAA,IAAI,EAAE,CACJ;AACEa,MAAAA,CAAC,EAAEL,KADL;AAEEM,MAAAA,CAAC,EAAEF,KAFL;AAGEG,MAAAA,IAAI,EAAE,WAHR;AAIEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,wBADD;AAENC,QAAAA,IAAI,EAAE;AACJD,UAAAA,KAAK,EAAE,wBADH;AAEJE,UAAAA,KAAK,EAAE;AAFH;AAFA,OAJV;AAWEC,MAAAA,QAAQ,EAAE,OAXZ;AAYEC,MAAAA,aAAa,EACX,6BACA,0BADA,GAEA;AAfJ,KADI,CAFR;AAqBE,IAAA,MAAM,EAAEjB;AArBV;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CAzDD;;KAAMP,S;AA2DN,eAAeA,SAAf","sourcesContent":["import React from 'react'\nimport Plot from 'react-plotly.js'\n\nconst Histogram = ({ data, xAxisAttribute, yAxisAttribute, title }) => {\n  console.log(data)\n  let layout = {\n    autosize: true,\n    // width: 500,\n    // height: 500,\n    // margin: {\n    //   l: 50,\n    //   r: 50,\n    //   b: 100,\n    //   t: 100,\n    //   pad: 6,\n    // },\n    title: title || 'Untitled',\n    xaxis: { title: xAxisAttribute },\n    yaxis: { title: 'Count' }\n  }\n\n  let xData = data.map((d) => {\n    if (d[xAxisAttribute] === undefined || d[xAxisAttribute] === 'NULL') {\n      return 'UNKOWN'\n    }\n    return d[xAxisAttribute]\n  })\n  console.log(data)\n  console.log(xData)\n  let yData = data.map((d) => {\n    if (d[yAxisAttribute] === undefined || d[yAxisAttribute] === 'NULL') {\n      return 'UNKOWN'\n    }\n    return d[yAxisAttribute]\n  })\n  return (\n    <Plot\n      className=\"\"\n      data={[\n        {\n          x: xData,\n          y: yData,\n          type: 'histogram',\n          marker: {\n            color: 'rgba(67, 174, 41, 0.7)',\n            line: {\n              color: 'rgba(255, 100, 102, 1)',\n              width: 1\n            }\n          },\n          histnorm: 'count',\n          hovertemplate:\n            '<b>Noise Value</b>: %{y}' +\n            '<br><b>Day</b>: %{x}<br>' +\n            '<extra></extra>'\n        }\n      ]}\n      layout={layout}\n    />\n  )\n}\n\nexport default Histogram\n"]},"metadata":{},"sourceType":"module"}