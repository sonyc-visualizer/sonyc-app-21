{"ast":null,"code":"var _jsxFileName = \"/Users/almazhan/Desktop/sonyc-app-1/src/pages/AllShows.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport axios from 'axios';\nimport './AllShows.css'; // uses same styling\n\nimport { Link, useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst ShowGrid = props => {\n  _s();\n\n  const [shows, setShows] = useState([]);\n\n  const makeAxiosCalls = urls => {\n    return urls.map(url => {\n      return axios.get(url);\n    });\n  };\n\n  useEffect(() => {\n    const urls = []; // This check is crucial--it sees whether userData (the props) has been loaded yet or not\n\n    if (!props.shows) {\n      setShows([]);\n    } else {\n      props.shows.map(show => {\n        if (show.type && show.type === 'movie') {\n          urls.push(`http://localhost:4000/movies/${show.ids.trakt}`);\n        } else {\n          urls.push(`http://localhost:4000/shows/${show.ids.trakt}`);\n        }\n\n        return show; // to satisfy warning about map expecting a return value\n      });\n      Promise.all(makeAxiosCalls(urls)).then(showInfo => {\n        setShows(showInfo.map(info => info.data));\n      });\n    }\n  }, [props.shows]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"all-shows-container\",\n      children: shows !== undefined && shows.length !== 0 ? shows.map(show => {\n        return /*#__PURE__*/_jsxDEV(Link, {\n          to: `/${show.type}s/${show.ids.trakt}`,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"show-images\",\n            src: show['poster-url'],\n            alt: `cover-${show.ids.trakt}-${show.type}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this)\n        }, show.ids.trakt + '-' + show.type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"no-shows\",\n        children: \"No shows found...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(ShowGrid, \"lt4sKoljhgDY9nzMRkpzzWWHEHs=\");\n\n_c = ShowGrid;\n\nconst AllShows = props => {\n  _s2();\n\n  const [shows, setShows] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    axios(`http://${process.env.REACT_APP_BASE_URL}:4000/shows-trakt`).then(response => {\n      setShows(response.data);\n    }).catch(err => {\n      console.log('Error: could not make the request.');\n      console.log(err);\n    });\n  }, []);\n\n  const popularShows = shows => {\n    return shows.map(show => {\n      // Can hardcode the type since this case only gets TV Shows\n      return {\n        value: show.ids.trakt,\n        label: show.title,\n        type: 'shows'\n      };\n    });\n  };\n\n  const searchShows = data => {\n    console.log(data);\n    return data.map(item => {\n      return {\n        value: item[item.type]['ids']['trakt'],\n        label: `${item[item.type]['title']} (${item[item.type]['year']})`,\n        type: `${item.type}s`\n      };\n    });\n  };\n\n  const loadOptions = input => {\n    let url;\n\n    if (input) {\n      url = `http://${process.env.REACT_APP_BASE_URL}:4000/shows-trakt?query=${input}`;\n    } else {\n      url = `http://${process.env.REACT_APP_BASE_URL}:4000/shows-trakt`;\n    }\n\n    return axios.get(url).then(response => {\n      // split into cases for popular shows or not\n      if (input) {\n        return searchShows(response.data);\n      } else {\n        return popularShows(response.data);\n      }\n    }).catch(err => {\n      console.log('Error: could not make the request.');\n      console.log(err);\n      return [];\n    });\n  };\n\n  const linkToShow = e => {\n    history.push(`/${e.type}/${e.value}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"pop-shows-header\",\n        children: \"Popular Shows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"ad\",\n        children: \"Explore the most popular shows in our database!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"search-container\",\n        children: /*#__PURE__*/_jsxDEV(AsyncSelect, {\n          className: \"search-bar\",\n          cacheOptions: true,\n          defaultOptions: true,\n          loadOptions: loadOptions,\n          onChange: linkToShow // Change this to account for type\n          ,\n          placeholder: \"Search Shows...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ShowGrid, {\n        shows: shows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(AllShows, \"kCVM0PU495la7w2iQA+K+zHYl1s=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = AllShows;\nexport default AllShows;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ShowGrid\");\n$RefreshReg$(_c2, \"AllShows\");","map":{"version":3,"sources":["/Users/almazhan/Desktop/sonyc-app-1/src/pages/AllShows.js"],"names":["React","useEffect","useState","AsyncSelect","Header","Footer","axios","Link","useHistory","require","config","ShowGrid","props","shows","setShows","makeAxiosCalls","urls","map","url","get","show","type","push","ids","trakt","Promise","all","then","showInfo","info","data","undefined","length","AllShows","history","process","env","REACT_APP_BASE_URL","response","catch","err","console","log","popularShows","value","label","title","searchShows","item","loadOptions","input","linkToShow","e"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport AsyncSelect from 'react-select/async'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport axios from 'axios'\nimport './AllShows.css' // uses same styling\nimport { Link, useHistory } from 'react-router-dom'\nrequire('dotenv').config()\n\nconst ShowGrid = (props) => {\n  const [shows, setShows] = useState([])\n\n  const makeAxiosCalls = (urls) => {\n    return urls.map((url) => {\n      return axios.get(url)\n    })\n  }\n\n  useEffect(() => {\n    const urls = []\n\n    // This check is crucial--it sees whether userData (the props) has been loaded yet or not\n    if (!props.shows) {\n      setShows([])\n    } else {\n      props.shows.map((show) => {\n        if (show.type && show.type === 'movie') {\n          urls.push(`http://localhost:4000/movies/${show.ids.trakt}`)\n        } else {\n          urls.push(`http://localhost:4000/shows/${show.ids.trakt}`)\n        }\n        return show // to satisfy warning about map expecting a return value\n      })\n\n      Promise.all(makeAxiosCalls(urls)).then((showInfo) => {\n        setShows(showInfo.map((info) => info.data))\n      })\n    }\n  }, [props.shows])\n\n  return (\n    <>\n      <div id=\"all-shows-container\">\n        {shows !== undefined && shows.length !== 0 ? (\n          shows.map((show) => {\n            return (\n              <Link\n                to={`/${show.type}s/${show.ids.trakt}`}\n                key={show.ids.trakt + '-' + show.type}>\n                <img\n                  className=\"show-images\"\n                  src={show['poster-url']}\n                  alt={`cover-${show.ids.trakt}-${show.type}`}\n                />\n              </Link>\n            )\n          })\n        ) : (\n          <p id=\"no-shows\">No shows found...</p>\n        )}\n      </div>\n    </>\n  )\n}\n\nconst AllShows = (props) => {\n  const [shows, setShows] = useState([])\n  const history = useHistory()\n\n  useEffect(() => {\n    axios(`http://${process.env.REACT_APP_BASE_URL}:4000/shows-trakt`)\n      .then((response) => {\n        setShows(response.data)\n      })\n      .catch((err) => {\n        console.log('Error: could not make the request.')\n        console.log(err)\n      })\n  }, [])\n\n  const popularShows = (shows) => {\n    return shows.map((show) => {\n      // Can hardcode the type since this case only gets TV Shows\n      return { value: show.ids.trakt, label: show.title, type: 'shows' }\n    })\n  }\n\n  const searchShows = (data) => {\n    console.log(data)\n    return data.map((item) => {\n      return {\n        value: item[item.type]['ids']['trakt'],\n        label: `${item[item.type]['title']} (${item[item.type]['year']})`,\n        type: `${item.type}s`\n      }\n    })\n  }\n\n  const loadOptions = (input) => {\n    let url\n    if (input) {\n      url = `http://${process.env.REACT_APP_BASE_URL}:4000/shows-trakt?query=${input}`\n    } else {\n      url = `http://${process.env.REACT_APP_BASE_URL}:4000/shows-trakt`\n    }\n    return axios\n      .get(url)\n      .then((response) => {\n        // split into cases for popular shows or not\n        if (input) {\n          return searchShows(response.data)\n        } else {\n          return popularShows(response.data)\n        }\n      })\n      .catch((err) => {\n        console.log('Error: could not make the request.')\n        console.log(err)\n        return []\n      })\n  }\n\n  const linkToShow = (e) => {\n    history.push(`/${e.type}/${e.value}`)\n  }\n\n  return (\n    <>\n      <Header />\n      <div id=\"container\">\n        <h1 id=\"pop-shows-header\">Popular Shows</h1>\n        <p id=\"ad\">Explore the most popular shows in our database!</p>\n        <div id=\"search-container\">\n          <AsyncSelect\n            className=\"search-bar\"\n            cacheOptions\n            defaultOptions\n            loadOptions={loadOptions}\n            onChange={linkToShow} // Change this to account for type\n            placeholder=\"Search Shows...\"\n          />\n        </div>\n        <ShowGrid shows={shows} />\n      </div>\n      <Footer />\n    </>\n  )\n}\nexport default AllShows\n"]},"metadata":{},"sourceType":"module"}